<template>
  <div class="box">
  </div>
</template>

<script>
  module.exports = {
    data: {
      controls: null,
      camera: null,
      scene: null,
      renderer: null,
      light: null,
      clock: null,
      // 状态
      type: 'rotate',
      model: null,
      // 是否正在旋转
      runing: false,
      // 模型
      Material_58: null,
      Material_59: null,
      window_box_1: null,
      window_box_2: null,
      Material_58: null,
      arrow_box: null,
      waitTime: 0
    },
    // 创建环境
    init: function () {
      // 创建摄像机
      this.data.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 20000 );
      this.data.camera.position.set( 0, 300, 400 )

      this.data.controls = new THREE.OrbitControls( this.data.camera )
      this.data.controls.target.set( 0, 100, 0 );
      this.data.controls.update();

      this.data.scene = new THREE.Scene();
      this.data.scene.background = new THREE.Color( 0xa0a0a0 );

      this.data.light = new THREE.HemisphereLight( 0xffffff, 0x444444 );
      this.data.light.position.set( 0, 200, 0 );
      this.data.scene.add( this.data.light );

      this.data.light = new THREE.DirectionalLight( 0xffffff );
      this.data.light.position.set( 0, 200, 100 );
      this.data.light.castShadow = true;
      this.data.light.shadow.camera.top = 180;
      this.data.light.shadow.camera.bottom = - 100;
      this.data.light.shadow.camera.left = - 120;
      this.data.light.shadow.camera.right = 120;
      this.data.scene.add( this.data.light );

      // this.data.scene.add( new THREE.CameraHelper( this.data.light.shadow.camera ) );

      // 网格线
      var grid = new THREE.GridHelper( 2000, 20, 0x000000, 0x000000 );
      grid.material.opacity = 0.2;
      grid.material.transparent = true;
      this.data.scene.add( grid );

      // model
      var loader = new THREE.FBXLoader();
      loader.load( './resource/2.FBX', ( object ) => {
        // console.log(object.getObjectByName('Material_58'))
        // object.scale.set(0.5, 0.5, 0.5)
        // 处理材质
        object.traverse( ( child ) => {
          // console.log(child.name)
          if ( child.isMesh ) {
            child.castShadow = true;
            child.receiveShadow = true;
          }
        })
        this.data.scene.add( object );

      } );

      // 文字
      var textLoader = new THREE.FontLoader()
      
      textLoader.load('./resource/FZKaTong-M19S_Regular.json', (font) => {
        var textOptions = {
          size: 2,
          height: 0,
          font: font,
          bevelThickness: 1,
          bevelSize: 1,
          bevelSegments: 1,
          curveSegments: 50,
          steps: 1
        }
        // ID
        // var textGeo = new THREE.TextGeometry('ID: 000001G0010001', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -15, 109, 51 )
        // this.data.scene.add(textMesh)
        // MeterCode
        var textGeo = new THREE.TextGeometry('P33', textOptions);
        var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        textMesh.position.set( -2, 187, 40 )
        this.data.scene.add(textMesh)
        // MeterName
        var textGeo = new THREE.TextGeometry('进线', textOptions);
        var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        textMesh.position.set( -3, 220, 40 )
        this.data.scene.add(textMesh)
        // // MeterParamId
        // var textGeo = new THREE.TextGeometry('31000000000700', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -15, 106, 51 )
        // this.data.scene.add(textMesh)
        // // MeterParamName
        // var textGeo = new THREE.TextGeometry('A相电压', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -15, 97, 51 )
        // this.data.scene.add(textMesh)
        // // ParamCode
        // var textGeo = new THREE.TextGeometry('ParamCode: Ua', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -15, 103, 51 )
        // this.data.scene.add(textMesh)
        // // CollectTime
        // var textGeo = new THREE.TextGeometry('2019-08-25T21:25:00', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -15, 100, 51 )
        // this.data.scene.add(textMesh)
        // // Value
        // var textGeo = new THREE.TextGeometry('228.300000', textOptions);
        // var textMesh = new THREE.Mesh(textGeo, new THREE.MeshBasicMaterial())
        // textMesh.position.set( -6, 211, 50 )
        // this.data.scene.add(textMesh)
      });
      
      


      this.data.renderer = new THREE.WebGLRenderer( { antialias: true } );
      this.data.renderer.setPixelRatio( window.devicePixelRatio );
      this.data.renderer.setSize( window.innerWidth, window.innerHeight );
      this.data.renderer.shadowMap.enabled = true;
      this.$el.appendChild( this.data.renderer.domElement );

      // window.addEventListener( 'resize', this.onWindowResize, false );

    },
    animate: function () {

      var delta = this.data.clock.getDelta();
      if (this.data.runing) {
        // 旋转模型
        if (this.data.scene.rotation.y < -Math.PI * 2) this.data.scene.rotation.y = 0
        // 模式为旋转
        this.data.scene.rotation.y -= Math.PI * 0.0005
      }
      // this.data.arrow_box.position.y ++
      this.data.renderer.render( this.data.scene, this.data.camera );
      setTimeout(() => {
        this.animate()
      }, 25)
    },
    onWindowResize: function () {
      this.data.camera.aspect = window.innerWidth / window.innerHeight;
      this.data.camera.updateProjectionMatrix();

      this.data.renderer.setSize( window.innerWidth, window.innerHeight );
    },
    created: function () {
      if ( WEBGL.isWebGLAvailable() === false ) {
        document.body.appendChild( WEBGL.getWebGLErrorMessage() );
      }
      console.log(this)
      this.data.clock = new THREE.Clock()
			this.init()
			this.animate()
    },
    stop: function () {
      console.log('停止自动旋转!')
      this.data.runing = false
    },
    // 打开窗户
    openWindow: function (name) {
      owo.script.home.data.scene.children[2].getObjectByName(name).rotation.x = -0.5
    },
    // 关闭窗户
    closeWindow: function (name) {
      owo.script.home.data.scene.children[2].getObjectByName(name).rotation.x = 0
    }
  }
</script>


<style lang="less">
  .box {
    overflow: hidden;
  }
  .tool-box {
    position: fixed;
    width: 100px;
    height: 40px;
    bottom: 0;
    right: 0;
    cursor: pointer;
    z-index: 999;
  }
</style>